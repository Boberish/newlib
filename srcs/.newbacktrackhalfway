/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaylor <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/05/29 09:10:04 by jaylor            #+#    #+#             */
/*   Updated: 2017/05/29 18:30:32 by jaylor           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lemin.h"

int		solve(char *path, int *y, int *x, int *z, int *i, t_room *r)
{
	while (y <= r->r_len - 1 && x <= r->r_len - 1)
	{
		if (r->map[*y][*x] == '2')
			return (2);
		if (r->map[*y][*x] == '1')
		{
			if (*z == 0)
			{
				if (ft_strchr(path, *x) == NULL)
				{
					if (solve(path, *y, ++(*x), 0, *i, r) == 0)
						return (1);
				}
				else
				{
					path[(*i)++] = *x;
					if (solve(path, *y, ++(*x), 0, --i, r) == 0)
					{
						path[i - 1] = '\0';
						if (ft_strlen(path) < r->bpath)
							r->bpath = path;					
						solve(path, y, ++x, 0, --i, r);
					}
					else
					{
						if (ft_strlen(path) < r->bpath)
							r->bpath = path;					
						solve(path, y, ++x, 0, --i, r);
					}
				}
			}
			else
			{
				if (ft_strchr(path, y) != NULL)
					;
				else
				{
					path[i++] = (char)y;
					if (solve(path, y, 0, 0, i, r) == 0)
					{
						path[i - 1] = '\0';
						solve(path, ++y, x, 1, --i, r);
					}
					else
					{
						if (ft_strlen(path) < ft_strlen(r->bpath))
							r->bpath = path;
						solve(path, ++y, x, 1, --i, r);
					}
				}
			}	
		}
		(z == 0) ? x++ : y++;
	}
	return (0);
}

int		ft_caller(t_room *r)
{
	int		*y;
	int		*x;
	int		*z;
	int		*i;
	int		k;
	char	*path;

	path = ft_strnew(r->r_len + 1);
	y = 0;
	x = 0;
	z = 0;
	i = 0;
	if ((k = solve(path, y, x, z, i, r) == 1))
	{
		path[*i - 1] = '\0';
		if (*z == 0)
		{
			solve(path, y, --x, 0, --i, r);
		}
		else
			solve(path, --y, x, 0, --i, r);
	}
	else
	{
		if (k == 2)
 		{
			if (ft_strlen(path) < ft_strlen(r->bpath))
				r->bpath = path;
		}
	}	

}
